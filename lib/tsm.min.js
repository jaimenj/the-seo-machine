"use strict";let tsm_interval_id,tsm_datatables,wpAjaxUrl,tsm_status="stopped";function tsmOnLoadMain(){console.log("Loading The SEO Machine view.."),jQuery("#tsm-datatable tfoot th").each((function(){jQuery(this).text();jQuery(this).html('<input type="text" placeholder="Filtrar.." />')})),tsmLoadDatatables(),tsmUpdateStatusBar()}function tsmLoadDatatables(){let t=document.getElementById("tsm-current-columns-to-show").value;t=t.split(","),console.log(t);let e=new Array;for(let s=0;s<t.length;s++)e.push({name:t[s],targets:s});console.log(e),tsm_datatables=jQuery("#tsm-datatable").DataTable({dom:'<"float-left"i><"float-right"f>t<"float-left"l>B<"float-right"p><"clearfix">',responsive:!0,order:[[0,"desc"]],buttons:["csv","excel","pdf"],initComplete:function(){this.api().columns().every((function(){let t=this;jQuery("input",this.footer()).on("keyup change",(function(){t.search()!==this.value&&t.search(this.value).draw()}))}))},processing:!0,serverSide:!0,ajax:{url:wpAjaxUrl+"?action=tsm_urls",type:"POST"},columnDefs:e}),console.log("Loaded The SEO Machine view!")}function tsmStudySite(){console.log("Starting study site.."),document.getElementById("tsm-btn-study-site").innerHTML="Stop",document.getElementById("tsm-btn-study-site").classList.add("tsm-button-studying");let t=document.getElementById("quantity_per_batch").value,e=document.getElementById("time_between_batches").value;console.log("Quantity per batch: "+t+", time between batches: "+e),tsm_interval_id=setInterval(tsmStudySiteSendAjax,1e3*e),tsm_status="studying"}function tsmStudySiteSendAjax(){document.getElementById("tsm-box-study-site-status").innerHTML="Doing batch..";let t=new XMLHttpRequest;t.onreadystatechange=function(e){4===t.readyState&&(document.getElementById("tsm-box-study-site-status").innerHTML="Studying with current status: <strong>"+t.responseText+"</strong>",tsmUpdateStatusBar(),tsm_datatables.ajax.reload(),t.responseText.includes("finished")&&tsmStopAll())},t.open("POST",wpAjaxUrl),t.setRequestHeader("Content-Type","application/x-www-form-urlencoded; charset=UTF-8"),t.send("action=tsm_do_batch")}function tsmUpdateStatusBar(){let t=new XMLHttpRequest;t.onreadystatechange=function(e){if(4===t.readyState){let e=t.responseText.split(",")[0],s=t.responseText.split(",")[1];t.responseText.split(",")[2];document.getElementById("tsm-progress-queue-text").innerHTML=s+" URLs studied from the queue out of a total of "+e+" URLs enqueued",document.getElementById("tsm-progress-queue-content").style.width=100*s/e+"%"}},t.open("POST",wpAjaxUrl),t.setRequestHeader("Content-Type","application/x-www-form-urlencoded; charset=UTF-8"),t.send("action=tsm_get_status")}function tsmStopAll(){clearInterval(tsm_interval_id),document.getElementById("tsm-btn-study-site").innerHTML="Study Site",document.getElementById("tsm-btn-study-site").classList.remove("tsm-button-studying"),tsm_status="stopped"}window.addEventListener("load",()=>{"undefined"!=typeof weAreInTheSeoMachine&&(wpAjaxUrl=document.getElementById("tsm_form").dataset.wpajaxurl,tsmOnLoadMain(),document.getElementById("tsm-btn-study-site").addEventListener("click",(function(){"stopped"==tsm_status?tsmStudySite():tsmStopAll()})))});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
