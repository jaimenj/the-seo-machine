"use strict";let tsm_interval_id,tsm_datatables,tsm_ajax_url,tsm_status="stopped";function tsmOnLoadMain(){console.log("Loading The SEO Machine view.."),tsmLoadDatatables(),tsmUpdateStatusBar()}function tsmLoadDatatables(){jQuery("#tsm-datatable tfoot th").each((function(){jQuery(this).text();jQuery(this).html('<input type="text" placeholder="Filter.." />')}));let t=document.getElementById("tsm-current-columns-to-show").value;t=t.split(","),console.log(t);let e=new Array;for(let s=0;s<t.length;s++)e.push({name:t[s],targets:s});console.log(e),tsm_datatables=jQuery("#tsm-datatable").DataTable({dom:'<"float-left"i><"float-right"f>t<"float-left"l>B<"float-right"p><"clearfix">',responsive:!0,order:[[0,"desc"]],buttons:["csv","excel","pdf"],initComplete:function(){this.api().columns().every((function(){let t=this;jQuery("input",this.footer()).on("keyup change",(function(){t.search()!==this.value&&t.search(this.value).draw()}))}))},processing:!0,serverSide:!0,ajax:{url:tsm_ajax_url+"?action=tsm_urls",type:"POST"},columnDefs:e,aLengthMenu:[[10,25,50,100,500,1e3,2e3,5e3,1e4,-1],[10,25,50,100,500,1e3,2e3,5e3,1e4,"All"]]}),console.log("Loaded The SEO Machine view!")}function tsmStudySite(){console.log("Starting study site.."),document.getElementById("tsm-btn-study-site").innerHTML="Stop",document.getElementById("tsm-btn-study-site").classList.add("tsm-button-studying");let t=document.getElementById("quantity_per_batch").value,e=document.getElementById("time_between_batches").value;console.log("Quantity per batch: "+t+", time between batches: "+e),tsm_interval_id=setInterval(tsmStudySiteSendAjax,1e3*e),tsm_status="studying"}function tsmStudySiteSendAjax(){document.getElementById("tsm-box-study-site-status").innerHTML="Doing batch..";let t=new XMLHttpRequest;t.onreadystatechange=function(e){4===t.readyState&&(document.getElementById("tsm-box-study-site-status").innerHTML="Studying with current status: <strong>"+t.responseText+"</strong>",tsmUpdateStatusBar(),tsm_datatables.ajax.reload(),t.responseText.includes("finished")&&tsmStopAll())},t.open("POST",tsm_ajax_url),t.setRequestHeader("Content-Type","application/x-www-form-urlencoded; charset=UTF-8"),t.send("action=tsm_do_batch")}function tsmUpdateStatusBar(){let t=new XMLHttpRequest;t.onreadystatechange=function(e){if(4===t.readyState){let e=t.responseText.split(",")[0],s=t.responseText.split(",")[1];t.responseText.split(",")[2];document.getElementById("tsm-progress-queue-text").innerHTML=s+" URLs studied from the queue out of a total of "+e+" URLs enqueued",document.getElementById("tsm-progress-queue-content").style.width=100*s/e+"%"}},t.open("POST",tsm_ajax_url),t.setRequestHeader("Content-Type","application/x-www-form-urlencoded; charset=UTF-8"),t.send("action=tsm_get_status")}function tsmStopAll(){clearInterval(tsm_interval_id),document.getElementById("tsm-btn-study-site").innerHTML="Study Site",document.getElementById("tsm-btn-study-site").classList.remove("tsm-button-studying"),tsm_status="stopped"}window.addEventListener("load",()=>{"undefined"!=typeof weAreInTheSeoMachine&&(tsm_ajax_url=document.getElementById("tsm_form").dataset.tsm_ajax_url,tsmOnLoadMain(),document.getElementById("tsm-btn-study-site").addEventListener("click",(function(){"stopped"==tsm_status?tsmStudySite():tsmStopAll()})))});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRzbS5qcyJdLCJuYW1lcyI6WyJ0c21faW50ZXJ2YWxfaWQiLCJ0c21fZGF0YXRhYmxlcyIsInRzbV9hamF4X3VybCIsInRzbV9zdGF0dXMiLCJ0c21PbkxvYWRNYWluIiwiY29uc29sZSIsImxvZyIsInRzbUxvYWREYXRhdGFibGVzIiwidHNtVXBkYXRlU3RhdHVzQmFyIiwialF1ZXJ5IiwiZWFjaCIsInRoaXMiLCJ0ZXh0IiwiaHRtbCIsImN1cnJlbnRDb2x1bW5zVG9TaG93IiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsInZhbHVlIiwic3BsaXQiLCJjb2x1bW5EZWZzQXJyYXkiLCJBcnJheSIsImluZGV4IiwibGVuZ3RoIiwicHVzaCIsIm5hbWUiLCJ0YXJnZXRzIiwiRGF0YVRhYmxlIiwiZG9tIiwicmVzcG9uc2l2ZSIsIm9yZGVyIiwiYnV0dG9ucyIsImluaXRDb21wbGV0ZSIsImFwaSIsImNvbHVtbnMiLCJldmVyeSIsInRoYXQiLCJmb290ZXIiLCJvbiIsInNlYXJjaCIsImRyYXciLCJwcm9jZXNzaW5nIiwic2VydmVyU2lkZSIsImFqYXgiLCJ1cmwiLCJ0eXBlIiwiY29sdW1uRGVmcyIsImFMZW5ndGhNZW51IiwidHNtU3R1ZHlTaXRlIiwiaW5uZXJIVE1MIiwiY2xhc3NMaXN0IiwiYWRkIiwicXVhbnRpdHlfcGVyX2JhdGNoIiwidGltZV9iZXR3ZWVuX2JhdGNoZXMiLCJzZXRJbnRlcnZhbCIsInRzbVN0dWR5U2l0ZVNlbmRBamF4IiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZXNwb25zZSIsInJlYWR5U3RhdGUiLCJyZXNwb25zZVRleHQiLCJyZWxvYWQiLCJpbmNsdWRlcyIsInRzbVN0b3BBbGwiLCJvcGVuIiwic2V0UmVxdWVzdEhlYWRlciIsInNlbmQiLCJudW1fdXJsc19pbl9xdWV1ZSIsIm51bV91cmxzX2luX3F1ZXVlX3Zpc2l0ZWQiLCJzdHlsZSIsIndpZHRoIiwiY2xlYXJJbnRlcnZhbCIsInJlbW92ZSIsIndpbmRvdyIsImFkZEV2ZW50TGlzdGVuZXIiLCJ3ZUFyZUluVGhlU2VvTWFjaGluZSIsImRhdGFzZXQiXSwibWFwcGluZ3MiOiJBQUFBLGFBRUEsSUFBSUEsZ0JBRUFDLGVBQ0FDLGFBRkFDLFdBQWEsVUFJakIsU0FBU0MsZ0JBQ0xDLFFBQVFDLElBQUksa0NBRVpDLG9CQUNBQyxxQkFHSixTQUFTRCxvQkFDTEUsT0FBTywyQkFBMkJDLE1BQU0sV0FDeEJELE9BQU9FLE1BQU1DLE9BRXpCSCxPQUFPRSxNQUFNRSxLQUFNLG1EQUd2QixJQUFJQyxFQUF1QkMsU0FBU0MsZUFBZSwrQkFBK0JDLE1BQ2xGSCxFQUF1QkEsRUFBcUJJLE1BQU0sS0FDbERiLFFBQVFDLElBQUlRLEdBRVosSUFBSUssRUFBa0IsSUFBSUMsTUFDMUIsSUFBSyxJQUFJQyxFQUFRLEVBQUdBLEVBQVFQLEVBQXFCUSxPQUFRRCxJQUNyREYsRUFBZ0JJLEtBQUssQ0FBRUMsS0FBUVYsRUFBcUJPLEdBQVFJLFFBQVdKLElBRTNFaEIsUUFBUUMsSUFBSWEsR0FFWmxCLGVBQWlCUSxPQUFPLGtCQUFrQmlCLFVBQVUsQ0FDaERDLElBQUssK0VBQ0xDLFlBQVksRUFDWkMsTUFBTyxDQUFDLENBQUUsRUFBRyxTQUNiQyxRQUFTLENBQUMsTUFBTyxRQUFTLE9BQzFCQyxhQUFjLFdBQ1ZwQixLQUFLcUIsTUFBTUMsVUFBVUMsT0FBTyxXQUN4QixJQUFJQyxFQUFPeEIsS0FFWEYsT0FBUSxRQUFTRSxLQUFLeUIsVUFBV0MsR0FBSSxnQkFBZ0IsV0FDNUNGLEVBQUtHLFdBQWEzQixLQUFLTSxPQUN4QmtCLEVBQ0tHLE9BQVEzQixLQUFLTSxPQUNic0IsY0FLckJDLFlBQVksRUFDWkMsWUFBWSxFQUNaQyxLQUFNLENBQ0ZDLElBQUt6QyxhQUFlLG1CQUNwQjBDLEtBQU0sUUFFVkMsV0FBWTFCLEVBQ1oyQixZQUFhLENBQUMsQ0FBQyxHQUFJLEdBQUksR0FBSSxJQUFLLElBQUssSUFBTSxJQUFNLElBQU0sS0FBUSxHQUFJLENBQUMsR0FBSSxHQUFJLEdBQUksSUFBSyxJQUFLLElBQU0sSUFBTSxJQUFNLElBQU8sVUFHdkh6QyxRQUFRQyxJQUFJLGdDQUdoQixTQUFTeUMsZUFDTDFDLFFBQVFDLElBQUkseUJBQ1pTLFNBQVNDLGVBQWUsc0JBQXNCZ0MsVUFBWSxPQUMxRGpDLFNBQVNDLGVBQWUsc0JBQXNCaUMsVUFBVUMsSUFBSSx1QkFFNUQsSUFBSUMsRUFBcUJwQyxTQUFTQyxlQUFlLHNCQUFzQkMsTUFDbkVtQyxFQUF1QnJDLFNBQVNDLGVBQWUsd0JBQXdCQyxNQUMzRVosUUFBUUMsSUFBSSx1QkFBeUI2QyxFQUFxQiwyQkFBNkJDLEdBRXZGcEQsZ0JBQWtCcUQsWUFBWUMscUJBQTZDLElBQXZCRixHQUNwRGpELFdBQWEsV0FHakIsU0FBU21ELHVCQUNMdkMsU0FBU0MsZUFBZSw2QkFBNkJnQyxVQUFZLGdCQUVqRSxJQUFJTyxFQUFNLElBQUlDLGVBRWRELEVBQUlFLG1CQUFxQixTQUFVQyxHQUNSLElBQW5CSCxFQUFJSSxhQUNKNUMsU0FBU0MsZUFBZSw2QkFBNkJnQyxVQUFZLHlDQUEyQ08sRUFBSUssYUFBZSxZQUMvSHBELHFCQUNBUCxlQUFleUMsS0FBS21CLFNBQ2pCTixFQUFJSyxhQUFhRSxTQUFTLGFBQ3pCQyxlQUtaUixFQUFJUyxLQUFLLE9BQVE5RCxjQUNqQnFELEVBQUlVLGlCQUFpQixlQUFnQixvREFDckNWLEVBQUlXLEtBQUssdUJBR2IsU0FBUzFELHFCQUNMLElBQUkrQyxFQUFNLElBQUlDLGVBRWRELEVBQUlFLG1CQUFxQixTQUFVQyxHQUMvQixHQUF1QixJQUFuQkgsRUFBSUksV0FBa0IsQ0FDdEIsSUFBSVEsRUFBb0JaLEVBQUlLLGFBQWExQyxNQUFNLEtBQUssR0FDaERrRCxFQUE0QmIsRUFBSUssYUFBYTFDLE1BQU0sS0FBSyxHQUM3Q3FDLEVBQUlLLGFBQWExQyxNQUFNLEtBQUssR0FFM0NILFNBQVNDLGVBQWUsMkJBQTJCZ0MsVUFBWW9CLEVBQ3pELGtEQUFvREQsRUFBb0IsaUJBQzlFcEQsU0FBU0MsZUFBZSw4QkFBOEJxRCxNQUFNQyxNQUFxQyxJQUE1QkYsRUFBa0NELEVBQXFCLE1BSXBJWixFQUFJUyxLQUFLLE9BQVE5RCxjQUNqQnFELEVBQUlVLGlCQUFpQixlQUFnQixvREFDckNWLEVBQUlXLEtBQUsseUJBR2IsU0FBU0gsYUFDTFEsY0FBY3ZFLGlCQUNWZSxTQUFTQyxlQUFlLHNCQUFzQmdDLFVBQVksYUFDMURqQyxTQUFTQyxlQUFlLHNCQUFzQmlDLFVBQVV1QixPQUFPLHVCQUMvRHJFLFdBQWEsVUFJckJzRSxPQUFPQyxpQkFBaUIsT0FBUSxLQUNRLG9CQUF6QkMsdUJBQ1B6RSxhQUFlYSxTQUFTQyxlQUFlLFlBQVk0RCxRQUFRMUUsYUFFM0RFLGdCQUNBVyxTQUFTQyxlQUFlLHNCQUFzQjBELGlCQUFpQixTQUFTLFdBQ2xELFdBQWR2RSxXQUNBNEMsZUFFQWdCIiwiZmlsZSI6InRzbS5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxubGV0IHRzbV9pbnRlcnZhbF9pZFxubGV0IHRzbV9zdGF0dXMgPSAnc3RvcHBlZCdcbmxldCB0c21fZGF0YXRhYmxlc1xubGV0IHRzbV9hamF4X3VybFxuXG5mdW5jdGlvbiB0c21PbkxvYWRNYWluKCkge1xuICAgIGNvbnNvbGUubG9nKCdMb2FkaW5nIFRoZSBTRU8gTWFjaGluZSB2aWV3Li4nKVxuXG4gICAgdHNtTG9hZERhdGF0YWJsZXMoKVxuICAgIHRzbVVwZGF0ZVN0YXR1c0JhcigpXG59XG5cbmZ1bmN0aW9uIHRzbUxvYWREYXRhdGFibGVzICgpIHtcbiAgICBqUXVlcnkoJyN0c20tZGF0YXRhYmxlIHRmb290IHRoJykuZWFjaCggZnVuY3Rpb24gKCkge1xuICAgICAgICBsZXQgdGl0bGUgPSBqUXVlcnkodGhpcykudGV4dCgpXG5cbiAgICAgICAgalF1ZXJ5KHRoaXMpLmh0bWwoICc8aW5wdXQgdHlwZT1cInRleHRcIiBwbGFjZWhvbGRlcj1cIkZpbHRlci4uXCIgLz4nIClcbiAgICB9KVxuXG4gICAgbGV0IGN1cnJlbnRDb2x1bW5zVG9TaG93ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RzbS1jdXJyZW50LWNvbHVtbnMtdG8tc2hvdycpLnZhbHVlXG4gICAgY3VycmVudENvbHVtbnNUb1Nob3cgPSBjdXJyZW50Q29sdW1uc1RvU2hvdy5zcGxpdCgnLCcpXG4gICAgY29uc29sZS5sb2coY3VycmVudENvbHVtbnNUb1Nob3cpXG5cbiAgICBsZXQgY29sdW1uRGVmc0FycmF5ID0gbmV3IEFycmF5KClcbiAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgY3VycmVudENvbHVtbnNUb1Nob3cubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgIGNvbHVtbkRlZnNBcnJheS5wdXNoKHsgXCJuYW1lXCI6IGN1cnJlbnRDb2x1bW5zVG9TaG93W2luZGV4XSwgXCJ0YXJnZXRzXCI6IGluZGV4IH0pICAgIFxuICAgIH1cbiAgICBjb25zb2xlLmxvZyhjb2x1bW5EZWZzQXJyYXkpXG5cbiAgICB0c21fZGF0YXRhYmxlcyA9IGpRdWVyeSgnI3RzbS1kYXRhdGFibGUnKS5EYXRhVGFibGUoe1xuICAgICAgICBkb206ICc8XCJmbG9hdC1sZWZ0XCJpPjxcImZsb2F0LXJpZ2h0XCJmPnQ8XCJmbG9hdC1sZWZ0XCJsPkI8XCJmbG9hdC1yaWdodFwicD48XCJjbGVhcmZpeFwiPicsXG4gICAgICAgIHJlc3BvbnNpdmU6IHRydWUsXG4gICAgICAgIG9yZGVyOiBbWyAwLCBcImRlc2NcIiBdXSxcbiAgICAgICAgYnV0dG9uczogWydjc3YnLCAnZXhjZWwnLCAncGRmJ10sXG4gICAgICAgIGluaXRDb21wbGV0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5hcGkoKS5jb2x1bW5zKCkuZXZlcnkoIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBsZXQgdGhhdCA9IHRoaXNcblxuICAgICAgICAgICAgICAgIGpRdWVyeSggJ2lucHV0JywgdGhpcy5mb290ZXIoKSApLm9uKCAna2V5dXAgY2hhbmdlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIHRoYXQuc2VhcmNoKCkgIT09IHRoaXMudmFsdWUgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGF0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnNlYXJjaCggdGhpcy52YWx1ZSApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmRyYXcoKVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KVxuICAgICAgICB9LFxuICAgICAgICBwcm9jZXNzaW5nOiB0cnVlLFxuICAgICAgICBzZXJ2ZXJTaWRlOiB0cnVlLFxuICAgICAgICBhamF4OiB7XG4gICAgICAgICAgICB1cmw6IHRzbV9hamF4X3VybCArICc/YWN0aW9uPXRzbV91cmxzJyxcbiAgICAgICAgICAgIHR5cGU6ICdQT1NUJ1xuICAgICAgICB9LFxuICAgICAgICBjb2x1bW5EZWZzOiBjb2x1bW5EZWZzQXJyYXksXG4gICAgICAgIGFMZW5ndGhNZW51OiBbWzEwLCAyNSwgNTAsIDEwMCwgNTAwLCAxMDAwLCAyMDAwLCA1MDAwLCAxMDAwMCwgLTFdLCBbMTAsIDI1LCA1MCwgMTAwLCA1MDAsIDEwMDAsIDIwMDAsIDUwMDAsIDEwMDAwLCBcIkFsbFwiXV1cbiAgICB9KVxuXG4gICAgY29uc29sZS5sb2coJ0xvYWRlZCBUaGUgU0VPIE1hY2hpbmUgdmlldyEnKVxufVxuXG5mdW5jdGlvbiB0c21TdHVkeVNpdGUoKSB7XG4gICAgY29uc29sZS5sb2coJ1N0YXJ0aW5nIHN0dWR5IHNpdGUuLicpXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RzbS1idG4tc3R1ZHktc2l0ZScpLmlubmVySFRNTCA9ICdTdG9wJ1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0c20tYnRuLXN0dWR5LXNpdGUnKS5jbGFzc0xpc3QuYWRkKCd0c20tYnV0dG9uLXN0dWR5aW5nJylcblxuICAgIGxldCBxdWFudGl0eV9wZXJfYmF0Y2ggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncXVhbnRpdHlfcGVyX2JhdGNoJykudmFsdWVcbiAgICBsZXQgdGltZV9iZXR3ZWVuX2JhdGNoZXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGltZV9iZXR3ZWVuX2JhdGNoZXMnKS52YWx1ZVxuICAgIGNvbnNvbGUubG9nKCdRdWFudGl0eSBwZXIgYmF0Y2g6ICcgKyBxdWFudGl0eV9wZXJfYmF0Y2ggKyAnLCB0aW1lIGJldHdlZW4gYmF0Y2hlczogJyArIHRpbWVfYmV0d2Vlbl9iYXRjaGVzKVxuXG4gICAgdHNtX2ludGVydmFsX2lkID0gc2V0SW50ZXJ2YWwodHNtU3R1ZHlTaXRlU2VuZEFqYXgsIHRpbWVfYmV0d2Vlbl9iYXRjaGVzICogMTAwMClcbiAgICB0c21fc3RhdHVzID0gJ3N0dWR5aW5nJ1xufVxuXG5mdW5jdGlvbiB0c21TdHVkeVNpdGVTZW5kQWpheCgpIHtcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndHNtLWJveC1zdHVkeS1zaXRlLXN0YXR1cycpLmlubmVySFRNTCA9ICdEb2luZyBiYXRjaC4uJ1xuXG4gICAgbGV0IHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpXG5cbiAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSA9PT0gNCkge1xuICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RzbS1ib3gtc3R1ZHktc2l0ZS1zdGF0dXMnKS5pbm5lckhUTUwgPSAnU3R1ZHlpbmcgd2l0aCBjdXJyZW50IHN0YXR1czogPHN0cm9uZz4nICsgeGhyLnJlc3BvbnNlVGV4dCArICc8L3N0cm9uZz4nXG4gICAgICAgICAgICB0c21VcGRhdGVTdGF0dXNCYXIoKVxuICAgICAgICAgICAgdHNtX2RhdGF0YWJsZXMuYWpheC5yZWxvYWQoKVxuICAgICAgICAgICAgaWYoeGhyLnJlc3BvbnNlVGV4dC5pbmNsdWRlcygnZmluaXNoZWQnKSkge1xuICAgICAgICAgICAgICAgIHRzbVN0b3BBbGwoKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgeGhyLm9wZW4oJ1BPU1QnLCB0c21fYWpheF91cmwpO1xuICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKCdDb250ZW50LVR5cGUnLCAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04Jyk7XG4gICAgeGhyLnNlbmQoJ2FjdGlvbj10c21fZG9fYmF0Y2gnKTtcbn1cblxuZnVuY3Rpb24gdHNtVXBkYXRlU3RhdHVzQmFyKCkge1xuICAgIGxldCB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKVxuXG4gICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgPT09IDQpIHtcbiAgICAgICAgICAgIGxldCBudW1fdXJsc19pbl9xdWV1ZSA9IHhoci5yZXNwb25zZVRleHQuc3BsaXQoJywnKVswXVxuICAgICAgICAgICAgbGV0IG51bV91cmxzX2luX3F1ZXVlX3Zpc2l0ZWQgPSB4aHIucmVzcG9uc2VUZXh0LnNwbGl0KCcsJylbMV1cbiAgICAgICAgICAgIGxldCBudW1fdXJscyA9IHhoci5yZXNwb25zZVRleHQuc3BsaXQoJywnKVsyXVxuXG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndHNtLXByb2dyZXNzLXF1ZXVlLXRleHQnKS5pbm5lckhUTUwgPSBudW1fdXJsc19pbl9xdWV1ZV92aXNpdGVkXG4gICAgICAgICAgICAgICAgKyAnIFVSTHMgc3R1ZGllZCBmcm9tIHRoZSBxdWV1ZSBvdXQgb2YgYSB0b3RhbCBvZiAnICsgbnVtX3VybHNfaW5fcXVldWUgKyAnIFVSTHMgZW5xdWV1ZWQnXG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndHNtLXByb2dyZXNzLXF1ZXVlLWNvbnRlbnQnKS5zdHlsZS53aWR0aCA9IChudW1fdXJsc19pbl9xdWV1ZV92aXNpdGVkICogMTAwIC8gbnVtX3VybHNfaW5fcXVldWUpICsgJyUnXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB4aHIub3BlbignUE9TVCcsIHRzbV9hamF4X3VybCk7XG4gICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoJ0NvbnRlbnQtVHlwZScsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7IGNoYXJzZXQ9VVRGLTgnKTtcbiAgICB4aHIuc2VuZCgnYWN0aW9uPXRzbV9nZXRfc3RhdHVzJyk7XG59XG5cbmZ1bmN0aW9uIHRzbVN0b3BBbGwoKXtcbiAgICBjbGVhckludGVydmFsKHRzbV9pbnRlcnZhbF9pZClcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RzbS1idG4tc3R1ZHktc2l0ZScpLmlubmVySFRNTCA9ICdTdHVkeSBTaXRlJ1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndHNtLWJ0bi1zdHVkeS1zaXRlJykuY2xhc3NMaXN0LnJlbW92ZSgndHNtLWJ1dHRvbi1zdHVkeWluZycpXG4gICAgICAgIHRzbV9zdGF0dXMgPSAnc3RvcHBlZCdcbn1cblxuLy8gU3RhcnRzIGFsbCBKUy4uXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsICgpID0+IHtcbiAgICBpZiAodHlwZW9mIHdlQXJlSW5UaGVTZW9NYWNoaW5lICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICB0c21fYWpheF91cmwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndHNtX2Zvcm0nKS5kYXRhc2V0LnRzbV9hamF4X3VybDtcblxuICAgICAgICB0c21PbkxvYWRNYWluKClcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RzbS1idG4tc3R1ZHktc2l0ZScpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKHRzbV9zdGF0dXMgPT0gJ3N0b3BwZWQnKSB7XG4gICAgICAgICAgICAgICAgdHNtU3R1ZHlTaXRlKClcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdHNtU3RvcEFsbCgpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgfVxufSlcbiJdfQ==
